diff -Naur orig/configure patched/configure
--- orig/configure	2014-10-06 23:33:44.134741323 +0200
+++ patched/configure	2017-04-26 01:15:35.240428260 +0200
@@ -37169,8 +37169,8 @@
                 if test "$wxUSE_GTK" = 1; then
         wxUSE_GSTREAMER="no"
 
-                                                                GST_VERSION_MAJOR=0
-        GST_VERSION_MINOR=10
+                                                                GST_VERSION_MAJOR=1
+        GST_VERSION_MINOR=0
         GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR
 
         if test "$wxUSE_GSTREAMER8" = "no"; then
@@ -37184,12 +37184,12 @@
         pkg_cv_GST_CFLAGS="$GST_CFLAGS"
     else
         if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-plugins-base-\$GST_VERSION\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION") 2>&5
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-video-\$GST_VERSION\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION") 2>&5
   ac_status=$?
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; then
-  pkg_cv_GST_CFLAGS=`$PKG_CONFIG --cflags "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION" 2>/dev/null`
+  pkg_cv_GST_CFLAGS=`$PKG_CONFIG --cflags "gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION" 2>/dev/null`
 else
   pkg_failed=yes
 fi
@@ -37202,12 +37202,12 @@
         pkg_cv_GST_LIBS="$GST_LIBS"
     else
         if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-plugins-base-\$GST_VERSION\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION") 2>&5
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-video-\$GST_VERSION\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION") 2>&5
   ac_status=$?
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; then
-  pkg_cv_GST_LIBS=`$PKG_CONFIG --libs "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION" 2>/dev/null`
+  pkg_cv_GST_LIBS=`$PKG_CONFIG --libs "gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION" 2>/dev/null`
 else
   pkg_failed=yes
 fi
@@ -37226,24 +37226,28 @@
         _pkg_short_errors_supported=no
 fi
         if test $_pkg_short_errors_supported = yes; then
-	        GST_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION"`
+	        GST_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION"`
         else
-	        GST_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION"`
+	        GST_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION"`
         fi
 	# Put the nasty error message in config.log where it belongs
 	echo "$GST_PKG_ERRORS" >&5
 
 
-                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 0.10 not available, falling back to 0.8" >&5
-$as_echo "$as_me: WARNING: GStreamer 0.10 not available, falling back to 0.8" >&2;}
-                    GST_VERSION_MINOR=8
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 1.0 not available, falling back to 0.10" >&5
+$as_echo "$as_me: WARNING: GStreamer 1.0 not available, falling back to 0.10" >&2;}
+                    GST_VERSION_MAJOR=0
+                    GST_VERSION_MINOR=10
+                    GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR
 
 
 elif test $pkg_failed = untried; then
 
-                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 0.10 not available, falling back to 0.8" >&5
-$as_echo "$as_me: WARNING: GStreamer 0.10 not available, falling back to 0.8" >&2;}
-                    GST_VERSION_MINOR=8
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 1.0 not available, falling back to 0.10" >&5
+$as_echo "$as_me: WARNING: GStreamer 1.0 not available, falling back to 0.10" >&2;}
+                    GST_VERSION_MAJOR=0
+                    GST_VERSION_MINOR=10
+                    GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR
 
 
 else
@@ -37253,14 +37257,13 @@
 $as_echo "yes" >&6; }
 
                     wxUSE_GSTREAMER="yes"
-                    GST_LIBS="$GST_LIBS -lgstinterfaces-$GST_VERSION"
 
 fi
         else
-                        GST_VERSION_MINOR=8
+                        GST_VERSION_MINOR=10
         fi
 
-        if test $GST_VERSION_MINOR = "8"; then
+        if test $GST_VERSION_MINOR = "10"; then
             GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR
 
 pkg_failed=no
@@ -37272,12 +37275,12 @@
         pkg_cv_GST_CFLAGS="$GST_CFLAGS"
     else
         if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-interfaces-\$GST_VERSION gstreamer-gconf-\$GST_VERSION\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-interfaces-$GST_VERSION gstreamer-gconf-$GST_VERSION") 2>&5
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-plugins-base-\$GST_VERSION\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION") 2>&5
   ac_status=$?
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; then
-  pkg_cv_GST_CFLAGS=`$PKG_CONFIG --cflags "gstreamer-$GST_VERSION gstreamer-interfaces-$GST_VERSION gstreamer-gconf-$GST_VERSION" 2>/dev/null`
+  pkg_cv_GST_CFLAGS=`$PKG_CONFIG --cflags "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION" 2>/dev/null`
 else
   pkg_failed=yes
 fi
@@ -37290,12 +37293,12 @@
         pkg_cv_GST_LIBS="$GST_LIBS"
     else
         if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-interfaces-\$GST_VERSION gstreamer-gconf-\$GST_VERSION\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-interfaces-$GST_VERSION gstreamer-gconf-$GST_VERSION") 2>&5
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gstreamer-\$GST_VERSION gstreamer-plugins-base-\$GST_VERSION\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION") 2>&5
   ac_status=$?
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; then
-  pkg_cv_GST_LIBS=`$PKG_CONFIG --libs "gstreamer-$GST_VERSION gstreamer-interfaces-$GST_VERSION gstreamer-gconf-$GST_VERSION" 2>/dev/null`
+  pkg_cv_GST_LIBS=`$PKG_CONFIG --libs "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION" 2>/dev/null`
 else
   pkg_failed=yes
 fi
@@ -37314,28 +37317,33 @@
         _pkg_short_errors_supported=no
 fi
         if test $_pkg_short_errors_supported = yes; then
-	        GST_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-interfaces-$GST_VERSION gstreamer-gconf-$GST_VERSION"`
+	        GST_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION"`
         else
-	        GST_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-interfaces-$GST_VERSION gstreamer-gconf-$GST_VERSION"`
+	        GST_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION"`
         fi
 	# Put the nasty error message in config.log where it belongs
 	echo "$GST_PKG_ERRORS" >&5
 
 
-                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 0.8/0.10 not available." >&5
-$as_echo "$as_me: WARNING: GStreamer 0.8/0.10 not available." >&2;}
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 0.10 not available" >&5
+$as_echo "$as_me: WARNING: GStreamer 0.10 not available" >&2;}
+
 
 elif test $pkg_failed = untried; then
 
-                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 0.8/0.10 not available." >&5
-$as_echo "$as_me: WARNING: GStreamer 0.8/0.10 not available." >&2;}
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: GStreamer 0.10 not available" >&5
+$as_echo "$as_me: WARNING: GStreamer 0.10 not available" >&2;}
+
 
 else
 	GST_CFLAGS=$pkg_cv_GST_CFLAGS
 	GST_LIBS=$pkg_cv_GST_LIBS
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
 $as_echo "yes" >&6; }
-	wxUSE_GSTREAMER="yes"
+
+                    wxUSE_GSTREAMER="yes"
+                    GST_LIBS="$GST_LIBS -lgstinterfaces-$GST_VERSION"
+
 fi
         fi
 
diff -Naur orig/src/unix/mediactrl.cpp patched/src/unix/mediactrl.cpp
--- orig/src/unix/mediactrl.cpp	2014-10-06 23:33:44.134741323 +0200
+++ patched/src/unix/mediactrl.cpp	2017-04-26 01:15:35.252428418 +0200
@@ -19,12 +19,10 @@
 
 #include <gst/gst.h>                // main gstreamer header
 
-// xoverlay/video stuff, gst-gconf for 0.8
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
-#   include <gst/interfaces/xoverlay.h>
+#if GST_CHECK_VERSION(1,0,0)
+#include <gst/video/video.h>
 #else
-#   include <gst/xoverlay/xoverlay.h>
-#   include <gst/gconf/gconf.h>        // gstreamer glib configuration
+#include <gst/interfaces/xoverlay.h>
 #endif
 
 #ifndef  WX_PRECOMP
@@ -48,11 +46,11 @@
 //-----------------------------------------------------------------------------
 
 /*
-   This is the GStreamer backend for unix. Currently we require 0.8 or
-   0.10. Here we use the "playbin" GstElement for ease of use.
+   This is the GStreamer backend for unix. Currently we require 0.10.
+   Here we use the "playbin" GstElement for ease of use.
 
-   Note that now we compare state change functions to GST_STATE_FAILURE
-   now rather than GST_STATE_SUCCESS as newer gstreamer versions return
+   Note that now we compare state change functions to GST_STATE_CHANGE_FAILURE
+   now rather than GST_STATE_CHANGE_SUCCESS as newer gstreamer versions return
    non-success values for returns that are otherwise successful but not
    immediate.
 
@@ -89,44 +87,6 @@
 //  Declarations
 //=============================================================================
 
-//-----------------------------------------------------------------------------
-//  GStreamer (most version compatibility) macros
-//-----------------------------------------------------------------------------
-
-// In 0.9 there was a HUGE change to GstQuery and the
-// gst_element_query function changed dramatically and split off
-// into two separate ones
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR <= 8
-#    define wxGst_element_query_duration(e, f, p) \
-                gst_element_query(e, GST_QUERY_TOTAL, f, p)
-#    define wxGst_element_query_position(e, f, p) \
-                gst_element_query(e, GST_QUERY_POSITION, f, p)
-#elif GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR == 9
-// However, the actual 0.9 version has a slightly different definition
-// and instead of gst_element_query_duration it has two parameters to
-// gst_element_query_position instead
-#    define wxGst_element_query_duration(e, f, p) \
-                gst_element_query_position(e, f, 0, p)
-#    define wxGst_element_query_position(e, f, p) \
-                gst_element_query_position(e, f, p, 0)
-#else
-#    define wxGst_element_query_duration \
-                gst_element_query_duration
-#    define wxGst_element_query_position \
-                gst_element_query_position
-#endif
-
-// Other 0.10 macros
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
-#   define GST_STATE_FAILURE GST_STATE_CHANGE_FAILURE
-#   define GST_STATE_SUCCESS GST_STATE_CHANGE_SUCCESS
-#   define GstElementState GstState
-#   define gst_gconf_get_default_video_sink() \
-        gst_element_factory_make ("gconfvideosink", "video-sink");
-#   define gst_gconf_get_default_audio_sink() \
-        gst_element_factory_make ("gconfaudiosink", "audio-sink");
-#endif
-
 // Max wait time for element state waiting - GST_CLOCK_TIME_NONE for inf
 #define wxGSTREAMER_TIMEOUT (100 * GST_MSECOND) // Max 100 milliseconds
 
@@ -189,11 +149,11 @@
     bool CheckForErrors();
     bool DoLoad(const wxString& locstring);
     wxMediaCtrl* GetControl() { return m_ctrl; } // for C Callbacks
-    void HandleStateChange(GstElementState oldstate, GstElementState newstate);
+    void HandleStateChange(GstState oldstate, GstState newstate);
     bool QueryVideoSizeFromElement(GstElement* element);
     bool QueryVideoSizeFromPad(GstPad* caps);
     void SetupXOverlay();
-    bool SyncStateChange(GstElement* element, GstElementState state,
+    bool SyncStateChange(GstElement* element, GstState state,
                          gint64 llTimeout = wxGSTREAMER_TIMEOUT);
     bool TryAudioSink(GstElement* audiosink);
     bool TryVideoSink(GstElement* videosink);
@@ -203,7 +163,11 @@
     double          m_dRate;        // Current playback rate -
                                     // see GetPlaybackRate for notes
     wxLongLong      m_llPausedPos;  // Paused position - see Pause()
+#if GST_CHECK_VERSION(1,0,0)
+    GstVideoOverlay* m_xoverlay;     // X Overlay that contains the GST video
+#else
     GstXOverlay*    m_xoverlay;     // X Overlay that contains the GST video
+#endif
     wxMutex         m_asynclock;    // See "discussion of internals"
     class wxGStreamerMediaEventHandler* m_eventHandler; // see below
 
@@ -226,7 +190,7 @@
 
     friend class wxGStreamerMediaEventHandler;
     friend class wxGStreamerLoadWaitTimer;
-    DECLARE_DYNAMIC_CLASS(wxGStreamerMediaBackend)
+    wxDECLARE_DYNAMIC_CLASS(wxGStreamerMediaBackend);
 };
 
 //-----------------------------------------------------------------------------
@@ -256,7 +220,7 @@
 // Implementation
 //=============================================================================
 
-IMPLEMENT_DYNAMIC_CLASS(wxGStreamerMediaBackend, wxMediaBackend)
+wxIMPLEMENT_DYNAMIC_CLASS(wxGStreamerMediaBackend, wxMediaBackend);
 
 //-----------------------------------------------------------------------------
 //
@@ -294,7 +258,11 @@
         // GST Doesn't redraw automatically while paused
         // Plus, the video sometimes doesn't redraw when it looses focus
         // or is painted over so we just tell it to redraw...
+#if GST_CHECK_VERSION(1,0,0)
+        gst_video_overlay_expose(be->m_xoverlay);
+#else
         gst_x_overlay_expose(be->m_xoverlay);
+#endif
     }
     else
     {
@@ -334,9 +302,15 @@
     GdkWindow* window = gtk_widget_get_window(widget);
     wxASSERT(window);
 
+#if GST_CHECK_VERSION(1,0,0)
+    gst_video_overlay_set_window_handle(be->m_xoverlay,
+                                GDK_WINDOW_XID(window)
+                                );
+#else
     gst_x_overlay_set_xwindow_id( GST_X_OVERLAY(be->m_xoverlay),
                                 GDK_WINDOW_XID(window)
                                 );
+#endif
     GtkWidget* w = be->GetControl()->m_wxwindow;
 #ifdef __WXGTK3__
     g_signal_connect(w, "draw", G_CALLBACK(draw), be);
@@ -349,30 +323,6 @@
 #endif // wxGTK
 
 //-----------------------------------------------------------------------------
-// "state-change" from m_playbin/GST_MESSAGE_STATE_CHANGE
-//
-// Called by gstreamer when the state changes - here we
-// send the appropriate corresponding wx event.
-//
-// 0.8 only as HandleStateChange does this in both versions
-//-----------------------------------------------------------------------------
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR < 10
-extern "C" {
-static void gst_state_change_callback(GstElement *play,
-                                      GstElementState oldstate,
-                                      GstElementState newstate,
-                                      wxGStreamerMediaBackend* be)
-{
-    if(be->m_asynclock.TryLock() == wxMUTEX_NO_ERROR)
-    {
-        be->HandleStateChange(oldstate, newstate);
-        be->m_asynclock.Unlock();
-    }
-}
-}
-#endif // <0.10
-
-//-----------------------------------------------------------------------------
 // "eos" from m_playbin/GST_MESSAGE_EOS
 //
 // Called by gstreamer when the media is done playing ("end of stream")
@@ -424,6 +374,7 @@
 }
 }
 
+#if !GST_CHECK_VERSION(1,0,0)
 //-----------------------------------------------------------------------------
 // "notify::stream-info" from m_playbin
 //
@@ -436,7 +387,6 @@
 //
 // (Undocumented?)
 //-----------------------------------------------------------------------------
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
 extern "C" {
 static void gst_notify_stream_info_callback(GstElement* WXUNUSED(element),
                                             GParamSpec* WXUNUSED(pspec),
@@ -449,32 +399,6 @@
 #endif
 
 //-----------------------------------------------------------------------------
-// "desired-size-changed" from m_xoverlay
-//
-// 0.8-specific this provides us with the video size when it changes -
-// even though we get the caps as well this seems to come before the
-// caps notification does...
-//
-// Note it will return 16,16 for an early-bird value or for audio
-//-----------------------------------------------------------------------------
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR < 10
-extern "C" {
-static void gst_desired_size_changed_callback(GstElement * play,
-                                              guint width, guint height,
-                                              wxGStreamerMediaBackend* be)
-{
-    if(!(width == 16 && height == 16))
-    {
-        be->m_videoSize.x = width;
-        be->m_videoSize.y = height;
-    }
-    else
-        be->QueryVideoSizeFromElement(be->m_playbin);
-}
-}
-#endif
-
-//-----------------------------------------------------------------------------
 // gst_bus_async_callback [static]
 // gst_bus_sync_callback [static]
 //
@@ -487,7 +411,6 @@
 // thread before the async version that we use to set the xwindow id of the
 // XOverlay (NB: This isn't currently used - see CreateControl()).
 //-----------------------------------------------------------------------------
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
 extern "C" {
 static gboolean gst_bus_async_callback(GstBus* WXUNUSED(bus),
                                        GstMessage* message,
@@ -537,8 +460,12 @@
 {
     // Pass a non-xwindowid-setting event on to the async handler where it
     // belongs
+#if GST_CHECK_VERSION(1,0,0)
+    if (!gst_is_video_overlay_prepare_window_handle_message (message))
+#else
     if (GST_MESSAGE_TYPE (message) != GST_MESSAGE_ELEMENT ||
         !gst_structure_has_name (message->structure, "prepare-xwindow-id"))
+#endif
     {
         //
         // NB: Unfortunately, the async callback can be quite
@@ -557,7 +484,6 @@
     return GST_BUS_DROP; // We handled this message - drop from the queue
 }
 }
-#endif
 
 //-----------------------------------------------------------------------------
 //
@@ -572,8 +498,8 @@
 // the async queue in 0.10. (Mostly this is here to avoid locking the
 // the mutex twice...)
 //-----------------------------------------------------------------------------
-void wxGStreamerMediaBackend::HandleStateChange(GstElementState oldstate,
-                                                GstElementState newstate)
+void wxGStreamerMediaBackend::HandleStateChange(GstState oldstate,
+                                                GstState newstate)
 {
     switch(newstate)
     {
@@ -603,6 +529,7 @@
     }
 }
 
+#if !GST_CHECK_VERSION(1,0,0)
 //-----------------------------------------------------------------------------
 // wxGStreamerMediaBackend::QueryVideoSizeFromElement
 //
@@ -642,14 +569,6 @@
             else
                 g_object_get (info, "object", &pad, NULL);
 
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR <= 8
-            // Killed in 0.9, presumely because events and such
-            // should be pushed on pads regardless of whether they
-            // are currently linked
-            pad = (GstPad *) GST_PAD_REALIZE (pad);
-            wxASSERT(pad);
-#endif
-
             if(!QueryVideoSizeFromPad(pad))
             {
                 // wait for those caps to get ready
@@ -672,6 +591,7 @@
 
     return true;
 }
+#endif
 
 //-----------------------------------------------------------------------------
 // wxGStreamerMediaBackend::QueryVideoSizeFromPad
@@ -680,7 +600,11 @@
 //-----------------------------------------------------------------------------
 bool wxGStreamerMediaBackend::QueryVideoSizeFromPad(GstPad* pad)
 {
+#if GST_CHECK_VERSION(1,0,0)
+    GstCaps* caps = gst_pad_get_current_caps(pad);
+#else
     const GstCaps* caps = GST_PAD_CAPS(pad);
+#endif
     if ( caps )
     {
         const GstStructure *s = gst_caps_get_structure (caps, 0);
@@ -706,11 +630,21 @@
                 m_videoSize.y = (int) ((float) den * m_videoSize.y / num);
         }
 
-         wxLogTrace(wxTRACE_GStreamer, wxT("Adjusted video size: [%i,%i]"),
-                     m_videoSize.x, m_videoSize.y);
+        wxLogTrace(wxTRACE_GStreamer, wxT("Adjusted video size: [%i,%i]"),
+                    m_videoSize.x, m_videoSize.y);
+#if GST_CHECK_VERSION(1,0,0)
+        gst_caps_unref (caps);
+#endif
+
+        NotifyMovieSizeChanged ();
+
         return true;
     } // end if caps
 
+    m_videoSize = wxSize(0,0);
+
+    NotifyMovieSizeChanged ();
+
     return false; // not ready/massive failure
 }
 
@@ -739,7 +673,11 @@
         GdkWindow* window = gtk_widget_get_window(m_ctrl->m_wxwindow);
         wxASSERT(window);
 #endif
+#if GST_CHECK_VERSION(1,0,0)
+        gst_video_overlay_set_window_handle(m_xoverlay,
+#else
         gst_x_overlay_set_xwindow_id(GST_X_OVERLAY(m_xoverlay),
+#endif
 #ifdef __WXGTK__
                         GDK_WINDOW_XID(window)
 #else
@@ -769,9 +707,8 @@
 //
 // PRECONDITION: Assumes m_asynclock is Lock()ed
 //-----------------------------------------------------------------------------
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
 bool wxGStreamerMediaBackend::SyncStateChange(GstElement* element,
-                                              GstElementState desiredstate,
+                                              GstState desiredstate,
                                               gint64 llTimeout)
 {
     GstBus* bus = gst_element_get_bus(element);
@@ -844,23 +781,6 @@
 
     return bSuccess;
 }
-#else // 0.8 implementation
-bool wxGStreamerMediaBackend::SyncStateChange(GstElement* element,
-                                              GstElementState desiredstate,
-                                              gint64 llTimeout)
-{
-    gint64 llTimeWaited = 0;
-    while(GST_STATE(element) != desiredstate)
-    {
-        if(llTimeWaited >= llTimeout)
-            break;
-        llTimeWaited += 10*GST_MSECOND;
-        wxMilliSleep(10);
-    }
-
-    return llTimeWaited != llTimeout;
-}
-#endif
 
 //-----------------------------------------------------------------------------
 // wxGStreamerMediaBackend::TryAudioSink
@@ -884,6 +804,31 @@
 
 bool wxGStreamerMediaBackend::TryVideoSink(GstElement* videosink)
 {
+#if GST_CHECK_VERSION(1,0,0)
+    // Check if the video sink either is an xoverlay or might contain one...
+    if( !GST_IS_BIN(videosink) && !GST_IS_VIDEO_OVERLAY(videosink) )
+    {
+        if(G_IS_OBJECT(videosink))
+            g_object_unref(videosink);
+        return false;
+    }
+
+    // Make our video sink and make sure it supports the x overlay interface
+    // the x overlay enables us to put the video in our control window
+    // (i.e. we NEED it!) - also connect to the natural video size change event
+    if( GST_IS_BIN(videosink) )
+        m_xoverlay = (GstVideoOverlay*)
+                        gst_bin_get_by_interface (GST_BIN (videosink),
+                                                  GST_TYPE_VIDEO_OVERLAY);
+    else
+        m_xoverlay = (GstVideoOverlay*) videosink;
+
+    if ( !GST_IS_VIDEO_OVERLAY(m_xoverlay) )
+    {
+        g_object_unref(videosink);
+        return false;
+    }
+#else
     // Check if the video sink either is an xoverlay or might contain one...
     if( !GST_IS_BIN(videosink) && !GST_IS_X_OVERLAY(videosink) )
     {
@@ -907,7 +852,7 @@
         g_object_unref(videosink);
         return false;
     }
-
+#endif
     return true;
 }
 
@@ -1046,11 +991,7 @@
     //Really init gstreamer
     gboolean bInited;
     GError* error = NULL;
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
     bInited = gst_init_check(&argcGST, &argvGST, &error);
-#else
-    bInited = gst_init_check(&argcGST, &argvGST);
-#endif
 
     // Cleanup arguments for unicode case
 #if wxUSE_UNICODE
@@ -1117,29 +1058,25 @@
         return false;
     }
 
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR < 10
-    // Connect the glib events/callbacks we want to our playbin
-    g_signal_connect(m_playbin, "eos",
-                     G_CALLBACK(gst_finish_callback), this);
-    g_signal_connect(m_playbin, "error",
-                     G_CALLBACK(gst_error_callback), this);
-    g_signal_connect(m_playbin, "state-change",
-                     G_CALLBACK(gst_state_change_callback), this);
-#else
     // GStreamer 0.10+ uses GstBus for this now, connect to the sync
     // handler as well so we can set the X window id of our xoverlay
     gst_bus_add_watch (gst_element_get_bus(m_playbin),
                        (GstBusFunc) gst_bus_async_callback, this);
+#if GST_CHECK_VERSION(1,0,0)
+    gst_bus_set_sync_handler(gst_element_get_bus(m_playbin),
+                             (GstBusSyncHandler) gst_bus_sync_callback, this, NULL);
+#else
     gst_bus_set_sync_handler(gst_element_get_bus(m_playbin),
                              (GstBusSyncHandler) gst_bus_sync_callback, this);
-    g_signal_connect(m_playbin, "notify::stream-info",
-                     G_CALLBACK(gst_notify_stream_info_callback), this);
 #endif
 
     // Get the audio sink
-    GstElement* audiosink = gst_gconf_get_default_audio_sink();
+    GstElement* audiosink;
+#if !GST_CHECK_VERSION(1,0,0)
+    audiosink = gst_element_factory_make ("gconfaudiosink", "audio-sink");
     if( !TryAudioSink(audiosink) )
     {
+#endif
         // fallback to autodetection, then alsa, then oss as a stopgap
         audiosink = gst_element_factory_make ("autoaudiosink", "audio-sink");
         if( !TryAudioSink(audiosink) )
@@ -1155,13 +1092,18 @@
                 }
             }
         }
+#if !GST_CHECK_VERSION(1,0,0)
     }
+#endif
 
     // Setup video sink - first try gconf, then auto, then xvimage and
     // then finally plain ximage
-    GstElement* videosink = gst_gconf_get_default_video_sink();
+    GstElement* videosink;
+#if !GST_CHECK_VERSION(1,0,0)
+    videosink = gst_element_factory_make ("gconfvideosink", "video-sink");
     if( !TryVideoSink(videosink) )
     {
+#endif
         videosink = gst_element_factory_make ("autovideosink", "video-sink");
         if( !TryVideoSink(videosink) )
         {
@@ -1179,13 +1121,19 @@
                 }
             }
         }
+#if !GST_CHECK_VERSION(1,0,0)
     }
+#endif
 
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR < 10
-    // Not on 0.10... called when video size changes
-    g_signal_connect(m_xoverlay, "desired-size-changed",
-                     G_CALLBACK(gst_desired_size_changed_callback), this);
+#if GST_CHECK_VERSION(1,0,0)
+    GstPad *video_sinkpad = gst_element_get_static_pad (videosink, "sink");
+    g_signal_connect (video_sinkpad, "notify::caps", G_CALLBACK (gst_notify_caps_callback), this);
+    gst_object_unref (video_sinkpad);
+#else
+    g_signal_connect(m_playbin, "notify::stream-info",
+                     G_CALLBACK(gst_notify_stream_info_callback), this);
 #endif
+
     // Tell GStreamer which window to draw to in 0.8 - 0.10
     // sometimes needs this too...
     SetupXOverlay();
@@ -1221,6 +1169,7 @@
 //-----------------------------------------------------------------------------
 bool wxGStreamerMediaBackend::Load(const wxURI& location)
 {
+#if !GST_CHECK_VERSION(1,0,0)
     if(location.GetScheme().CmpNoCase(wxT("file")) == 0)
     {
         wxString uristring = location.BuildUnescapedURI();
@@ -1232,6 +1181,7 @@
                      );
     }
     else
+#endif
         return DoLoad(location.BuildURI());
 }
 
@@ -1258,7 +1208,7 @@
 
     // Set playbin to ready to stop the current media...
     if( gst_element_set_state (m_playbin,
-                               GST_STATE_READY) == GST_STATE_FAILURE ||
+                               GST_STATE_READY) == GST_STATE_CHANGE_FAILURE ||
         !SyncStateChange(m_playbin, GST_STATE_READY))
     {
         CheckForErrors();
@@ -1281,7 +1231,7 @@
     // Try to pause media as gstreamer won't let us query attributes
     // such as video size unless it is paused or playing
     if( gst_element_set_state (m_playbin,
-                               GST_STATE_PAUSED) == GST_STATE_FAILURE ||
+                               GST_STATE_PAUSED) == GST_STATE_CHANGE_FAILURE ||
         !SyncStateChange(m_playbin, GST_STATE_PAUSED))
     {
         CheckForErrors();
@@ -1312,7 +1262,7 @@
 bool wxGStreamerMediaBackend::Play()
 {
     if (gst_element_set_state (m_playbin,
-                               GST_STATE_PLAYING) == GST_STATE_FAILURE)
+                               GST_STATE_PLAYING) == GST_STATE_CHANGE_FAILURE)
     {
         CheckForErrors();
         return false;
@@ -1332,7 +1282,7 @@
 {
     m_llPausedPos = wxGStreamerMediaBackend::GetPosition();
     if (gst_element_set_state (m_playbin,
-                               GST_STATE_PAUSED) == GST_STATE_FAILURE)
+                               GST_STATE_PAUSED) == GST_STATE_CHANGE_FAILURE)
     {
         CheckForErrors();
         return false;
@@ -1353,7 +1303,7 @@
     {   // begin state lock
         wxMutexLocker lock(m_asynclock);
         if(gst_element_set_state (m_playbin,
-                                  GST_STATE_PAUSED) == GST_STATE_FAILURE ||
+                                  GST_STATE_PAUSED) == GST_STATE_CHANGE_FAILURE ||
           !SyncStateChange(m_playbin, GST_STATE_PAUSED))
         {
             CheckForErrors();
@@ -1417,11 +1367,17 @@
     else
     {
         gint64 pos;
+#if GST_CHECK_VERSION(1,0,0)
+        if (!gst_element_query_position(m_playbin, GST_FORMAT_TIME, &pos) ||
+            pos == -1)
+            return 0;
+#else
         GstFormat fmtTime = GST_FORMAT_TIME;
 
-        if (!wxGst_element_query_position(m_playbin, &fmtTime, &pos) ||
+        if (!gst_element_query_position(m_playbin, &fmtTime, &pos) ||
             fmtTime != GST_FORMAT_TIME || pos == -1)
             return 0;
+#endif
         return pos / GST_MSECOND ;
     }
 }
@@ -1446,36 +1402,13 @@
 //-----------------------------------------------------------------------------
 bool wxGStreamerMediaBackend::SetPosition(wxLongLong where)
 {
-#if GST_VERSION_MAJOR == 0 && GST_VERSION_MINOR == 8 \
-                           && GST_VERSION_MICRO == 0
-    // 0.8.0 has no gst_element_seek according to official docs!!!
-    wxLogSysError(wxT("GStreamer 0.8.0 does not have gst_element_seek")
-                  wxT(" according to official docs"));
-    return false;
-#else // != 0.8.0
-
-#   if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
-        gst_element_seek (m_playbin, m_dRate, GST_FORMAT_TIME,
-           (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT),
-                          GST_SEEK_TYPE_SET, where.GetValue() * GST_MSECOND,
-                          GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE );
-#   else
-        // NB: Some gstreamer versions return false basically all the time
-        // here - even totem doesn't bother to check the return value here
-        // so I guess we'll just assume it worked -
-        // TODO: maybe check the gst error callback???
-        gst_element_seek (m_playbin, (GstSeekType) (GST_SEEK_METHOD_SET |
-            GST_FORMAT_TIME | GST_SEEK_FLAG_FLUSH),
-            where.GetValue() * GST_MSECOND );
-
-#   endif // GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
+    gst_element_seek (m_playbin, m_dRate, GST_FORMAT_TIME,
+       (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT),
+                      GST_SEEK_TYPE_SET, where.GetValue() * GST_MSECOND,
+                      GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE );
 
-    {
-        m_llPausedPos = where;
-        return true;
-    }
+    m_llPausedPos = where;
     return true;
-#endif //== 0.8.0
 }
 
 //-----------------------------------------------------------------------------
@@ -1487,11 +1420,17 @@
 wxLongLong wxGStreamerMediaBackend::GetDuration()
 {
     gint64 length;
+#if GST_CHECK_VERSION(1,0,0)
+    if(!gst_element_query_duration(m_playbin, GST_FORMAT_TIME, &length) ||
+       length == -1)
+        return 0;
+#else
     GstFormat fmtTime = GST_FORMAT_TIME;
 
-    if(!wxGst_element_query_duration(m_playbin, &fmtTime, &length) ||
+    if(!gst_element_query_duration(m_playbin, &fmtTime, &length) ||
        fmtTime != GST_FORMAT_TIME || length == -1)
         return 0;
+#endif
     return length / GST_MSECOND ;
 }
 
@@ -1550,9 +1489,8 @@
                     // plugins that support it...
 }
 
-bool wxGStreamerMediaBackend::SetPlaybackRate(double dRate)
+bool wxGStreamerMediaBackend::SetPlaybackRate(double /* dRate */)
 {
-#if GST_VERSION_MAJOR > 0 || GST_VERSION_MINOR >= 10
 #if 0 // not tested enough
     if( gst_element_seek (m_playbin, dRate, GST_FORMAT_TIME,
                  (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT),
@@ -1562,9 +1500,6 @@
         m_dRate = dRate;
         return true;
     }
-#else
-    wxUnusedVar(dRate);
-#endif
 #endif
 
     // failure
@@ -1593,11 +1528,17 @@
 wxLongLong wxGStreamerMediaBackend::GetDownloadTotal()
 {
     gint64 length;
+#if GST_CHECK_VERSION(1,0,0)
+    if (!gst_element_query_duration(m_playbin, GST_FORMAT_BYTES, &length) ||
+         length == -1)
+        return 0;
+#else
     GstFormat fmtBytes = GST_FORMAT_BYTES;
 
-    if (!wxGst_element_query_duration(m_playbin, &fmtBytes, &length) ||
+    if (!gst_element_query_duration(m_playbin, &fmtBytes, &length) ||
           fmtBytes != GST_FORMAT_BYTES || length == -1)
         return 0;
+#endif
     return length;
 }
 
